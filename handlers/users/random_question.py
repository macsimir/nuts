from aiogram import types, F
from aiogram.filters import Command
from utils.config import dp,bot
from db.DATABASE import User, Question, UserQuestion, Session, Tag,create_new_user,get_user_by_telegram_id,get_random_question_by_tag, UserTag
from handlers.users.keyboard import random_question_button,get_invite_button , Tag_key, tag_reply_key, Relationship_keyboard
from utils.utils import random_questions_F_funck
import random


@dp.callback_query(F.data == "random_questions_F_key")
async def random_questions_F_funck(callback: types.CallbackQuery):
    await callback.message.delete()
    session = Session() 
    user_id = callback.message.chat.id
    user = get_user_by_telegram_id(telegram_id=user_id, session=session)
    telegram_id = callback.message.chat.id
    

    user = session.query(User).filter_by(telegram_id=telegram_id).first()

    if callback.message.chat.type == "private":
        keyboard = await get_invite_button(bot)  # –ü–µ—Ä–µ–¥–∞–µ–º bot –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)
    else:
        if user:
            await callback.message.answer(
                "–ü—Ä–∏–≤–µ—Ç, –æ —á–µ–º —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?",
                reply_markup=Tag_key()
            )
        else:
            new_user = User(telegram_id=telegram_id, privilege="User")
            session.add(new_user)
            session.commit()
            create_new_user(session=session, telegram_id=user_id)
            await callback.message.answer(
                "–ü—Ä–∏–≤–µ—Ç, –æ —á–µ–º —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?",
                reply_markup=Tag_key()
            )
    # await callback.message.answer("–¢–µ–∫—Å—Ç")



@dp.callback_query(F.data.startswith("F_"))
async def callbacks_num(callback: types.CallbackQuery):
    await callback.message.delete()
    action = callback.data.split("_")[1]

    if action == "Philosophy":
        await callback.message.answer('–¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã! üß†‚ú® \n –ò –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –±–ª–µ—Å–Ω—É—Ç—å —Å–≤–æ–∏–º —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º –¥—É—Ö–æ–º –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º! ü§îüí¨ \n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"!')
        await random_questions_F_funck(callback=callback,tag_id=1)
    elif action == "Life":
        await callback.message.answer("–ñ–∏–∑–Ω—å")
        await random_questions_F_funck(callback=callback,tag_id=2)
    elif action == "rest":
        await callback.message.answer("–û—Ç–¥—ã—Ö –∏ –¥–æ—Å—É–≥")
        await random_questions_F_funck(callback=callback,tag_id=3)
    elif action == "Relationship":
        await callback.message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç–µ–ø–µ–Ω—å –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=Relationship_keyboard())

        # await callback.message.answer("–û—Ç–Ω–æ—à–µ–Ω–∏—è")
    #     await random_questions_F_funck(callback=callback,tag_id=4)
    await callback.answer()


def get_random_question_by_tag(session):
    tag_id = 1
    questions = session.query(Question).filter(Question.tag_question == tag_id).all()
    if not questions:
        return None  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    random_question = random.choice(questions)
    return random_question.question_text
async def random_questions_F_funck(callback, tag_id, keyboard=None):
    session = Session()
    user_telegram_id = callback.message.chat.id
    user = session.query(User).filter_by(telegram_id=user_telegram_id).first()

    if user is None:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        session.close()
        return    
    
    questions_with_tag = session.query(Question).filter_by(tag_question=tag_id).all()    
    if not questions_with_tag:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–≥–∞.")
        session.close()
        return

    question = None
    user_question = None
    while not question or user_question:
        question = random.choice(questions_with_tag)
        user_question = session.query(UserQuestion).filter_by(user_id=user.user_id, question_id=question.question_id).first()

    user_question = UserQuestion(user_id=user.user_id, question_id=question.question_id, asked=True)

    try:
        session.add(user_question)
        session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ UserTag
        existing_user_tag = session.query(UserTag).filter_by(telegram_id_user=user_telegram_id).first()
        
        if existing_user_tag:
            existing_user_tag.tag_id = tag_id
        else:
            new_user_tag = UserTag(telegram_id_user=user_telegram_id, tag_id=tag_id)
            session.add(new_user_tag)    

        session.commit()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        question_message = await callback.message.answer(question.question_text, reply_markup=tag_reply_key())
        
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        session.rollback()
    finally:
        session.close()


@dp.message(F.text.lower() == "üöÄ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
async def knopka_key_F_random(message: types.Message):
    session = Session()
    user_telegram_id = message.chat.id
    tag_to_user = session.query(UserTag).filter_by(telegram_id_user=user_telegram_id).first()
    tag_id = tag_to_user.tag_id
    user = session.query(User).filter_by(telegram_id=user_telegram_id).first()

    if user is None:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        session.close()
        return    
    
    questions_with_tag = session.query(Question).filter_by(tag_question=tag_id).all()    
    if not questions_with_tag:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–≥–∞.")
        session.close()
        return

    question = None
    user_question = None
    while not question or user_question:
        question = random.choice(questions_with_tag)
        user_question = session.query(UserQuestion).filter_by(user_id=user.user_id, question_id=question.question_id).first()

    user_question = UserQuestion(user_id=user.user_id, question_id=question.question_id, asked=True)

    try:
        session.add(user_question)
        session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ UserTag
        existing_user_tag = session.query(UserTag).filter_by(telegram_id_user=user_telegram_id).first()
        
        if existing_user_tag:
            existing_user_tag.tag_id = tag_id
        else:
            new_user_tag = UserTag(telegram_id_user=user_telegram_id, tag_id=tag_id)
            session.add(new_user_tag)    

        session.commit()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        question_message = await message.answer(question.question_text, reply_markup=tag_reply_key())
        
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        session.rollback()
    finally:
        session.close()